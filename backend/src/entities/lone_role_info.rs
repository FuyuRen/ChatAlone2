//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use chrono::Utc;
use sea_orm::ActiveValue;
use sea_orm::entity::prelude::*;
use crate::id::{GeneralId, LoneId, RoleId, UserId};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(schema_name = "chat", table_name = "lone_role_info")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub lone_id: i32,
    pub privilege: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::assoc_lone_user::Entity")]
    AssocLoneUser,
    #[sea_orm(has_many = "super::assoc_room_user::Entity")]
    AssocRoomUser,
    #[sea_orm(
        belongs_to = "super::lone_info::Entity",
        from = "Column::LoneId",
        to = "super::lone_info::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    LoneInfo,
}

impl Related<super::assoc_lone_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AssocLoneUser.def()
    }
}

impl Related<super::assoc_room_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AssocRoomUser.def()
    }
}

impl Related<super::lone_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LoneInfo.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug)]
pub struct RolePrivilege(u64);

impl Into<u64> for RolePrivilege {
    fn into(self) -> u64 {
        self.0
    }
}
impl Into<i64> for RolePrivilege {
    fn into(self) -> i64 {
        self.0 as i64
    }
}
impl From<u64> for RolePrivilege {
    fn from(val: u64) -> Self {
        RolePrivilege(val)
    }
}
impl From<i64> for RolePrivilege {
    fn from(val: i64) -> Self {
        RolePrivilege::from(val as u64)
    }
}
impl Default for RolePrivilege {
    fn default() -> Self {
        RolePrivilege(0)
    }
}

pub struct LoneRoleTable {
    is_customized:      bool,
    pub id:             RoleId,
    pub lone_id:        UserId,
    pub name:           String,
    pub privilege:      RolePrivilege,
}

impl LoneRoleTable {
    pub fn from_val(id: i32, lone_id: i32, name: &str, privilege: RolePrivilege) -> Self {
        LoneRoleTable {
            is_customized:  true,
            id:             RoleId::from_decoded(id as u32),
            lone_id:        UserId::from_decoded(lone_id as u32),
            name:           name.to_string(),
            privilege,
        }
    }

    pub fn new(lone_id: i32, name: &str, privilege: RolePrivilege) -> Self {
        Self::from_val(0, lone_id, name, privilege)
    }

    pub fn id(&self) -> RoleId {
        self.id
    }
    pub fn owner(&self) -> UserId {
        self.lone_id
    }
    pub fn privilege(&self) -> RolePrivilege {
        self.privilege
    }
}

impl From<Model> for LoneRoleTable {
    fn from(model: Model) -> Self {
        LoneRoleTable {
            is_customized:  false,
            id:             LoneId::from_decoded(model.id as u32),
            lone_id:        LoneId::from_decoded(model.lone_id as u32),
            name:           model.name,
            privilege:      RolePrivilege::from(model.privilege),
        }
    }
}

impl Into<ActiveModel> for LoneRoleTable {
    fn into(self) -> ActiveModel {
        if self.is_customized {
            ActiveModel {
                id:             ActiveValue::NotSet,
                lone_id:        ActiveValue::Set(self.lone_id.decode() as i32),
                name:           ActiveValue::Set(self.name),
                privilege:      ActiveValue::Set(self.privilege.into())
            }
        } else {
            ActiveModel {
                id:             ActiveValue::Set(self.id.decode() as i32),
                lone_id:        ActiveValue::Set(self.lone_id.decode() as i32),
                name:           ActiveValue::Set(self.name),
                privilege:      ActiveValue::Set(self.privilege.into())
            }
        }
    }
}

impl Into<Model> for LoneRoleTable {
    fn into(self) -> Model {
        Model {
            id:             self.id.decode() as i32,
            lone_id:        self.lone_id.decode() as i32,
            name:           self.name,
            privilege:      self.privilege.into()
        }
    }
}