//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use chrono::Utc;
use sea_orm::ActiveValue;
use sea_orm::entity::prelude::*;
use crate::uuid::UUID;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(schema_name = "chat", table_name = "user_info")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub user_id: i64,
    #[sea_orm(unique)]
    pub email: String,
    pub username: String,
    pub password: String,
    pub register_time: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}


pub struct UserTable {
    user_id: UUID,
    email: String,
    username: String,
    password: String,
    register_time: DateTime,
}

impl UserTable {
    pub fn new(email: &str, username: &str, password: &str) -> Self {
        UserTable {
            user_id:        UUID::new(),
            email:          email.to_string(),
            username:       username.to_string(),
            password:       password.to_string(),
            register_time:  Utc::now().naive_utc(),
        }
    }
    pub fn verify_password(&self, password: &String) -> bool {
        self.password.eq(password)
    }

    pub fn uuid(&self) -> UUID {
        self.user_id.clone()
    }
}

impl From<Model> for UserTable {
    fn from(model: Model) -> Self {
        UserTable {
            user_id:        UUID::from(model.user_id),
            email:          model.email,
            username:       model.username,
            password:       model.password,
            register_time:  model.register_time,
        }
    }
}

impl Into<ActiveModel> for UserTable {
    fn into(self) -> ActiveModel {
        ActiveModel {
            user_id:       ActiveValue::Set(self.user_id.into()),
            email:         ActiveValue::Set(self.email),
            username:      ActiveValue::Set(self.username),
            password:      ActiveValue::Set(self.password),
            register_time: ActiveValue::Set(self.register_time),
        }
    }
}

impl Into<Model> for UserTable {
    fn into(self) -> Model {
        Model {
            user_id:       self.user_id.into(),
            email:         self.email,
            username:      self.username,
            password:      self.password,
            register_time: self.register_time,
        }
    }
}